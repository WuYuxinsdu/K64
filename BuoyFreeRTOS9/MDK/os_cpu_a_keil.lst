


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ;*******************************************************
                       *************************************************
    3 00000000         ;                                                uC/OS-I
                       I
    4 00000000         ;                                          The Real-Time
                        Kernel
    5 00000000         ;
    6 00000000         ;
    7 00000000         ;                              (c) Copyright 2010; Micri
                       um, Inc.; Weston, FL
    8 00000000         ;                    All rights reserved.  Protected by 
                       international copyright laws.
    9 00000000         ;
   10 00000000         ;                                           ARM Cortex-M
                       4 Port
   11 00000000         ;
   12 00000000         ; File      : OS_CPU_A.ASM
   13 00000000         ; Version   : V2.92
   14 00000000         ; By        : JJL
   15 00000000         ;             BAN
   16 00000000         ;
   17 00000000         ; For       : ARMv7 Cortex-M4
   18 00000000         ; Mode      : Thumb-2 ISA
   19 00000000         ; Toolchain : IAR EWARM
   20 00000000         ;*******************************************************
                       *************************************************
   21 00000000         ;
   22 00000000         
   23 00000000         ;*******************************************************
                       *************************************************
   24 00000000         ;                                          PUBLIC FUNCTI
                       ONS
   25 00000000         ;*******************************************************
                       *************************************************
   26 00000000         
   27 00000000                 EXTERN           OSRunning   ; External referenc
                                                            es
   28 00000000                 EXTERN           OSPrioCur
   29 00000000                 EXTERN           OSPrioHighRdy
   30 00000000                 EXTERN           OSTCBCur
   31 00000000                 EXTERN           OSTCBHighRdy
   32 00000000                 EXTERN           OSIntExit
   33 00000000                 EXTERN           OSTaskSwHook
   34 00000000                 EXTERN           OS_CPU_ExceptStkBase
   35 00000000         
   36 00000000                 EXPORT           OS_CPU_SR_Save ; Functions decl
                                                            ared in this file
   37 00000000                 EXPORT           OS_CPU_SR_Restore
   38 00000000                 EXPORT           OSStartHighRdy
   39 00000000                 EXPORT           OSCtxSw
   40 00000000                 EXPORT           OSIntCtxSw
   41 00000000                 EXPORT           PendSV_Handler
   42 00000000         
   43 00000000         ;PAGE
   44 00000000         ;*******************************************************
                       *************************************************
   45 00000000         ;                                               EQUATES
   46 00000000         ;*******************************************************



ARM Macro Assembler    Page 2 


                       *************************************************
   47 00000000         
   48 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   49 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; System priority r
                                                            egister (priority 1
                                                            4).
   50 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   51 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   52 00000000         
   53 00000000         
   54 00000000         ;*******************************************************
                       *************************************************
   55 00000000         ;                                     CODE GENERATION DI
                       RECTIVES
   56 00000000         ;*******************************************************
                       *************************************************
   57 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   58 00000000                 THUMB
   59 00000000                 REQUIRE8
   60 00000000                 PRESERVE8
   61 00000000         
   62 00000000         ;  RSEG CODE:CODE:NOROOT(2)
   63 00000000         ;  THUMB
   64 00000000         
   65 00000000         ;*******************************************************
                       *************************************************
   66 00000000         ;                                   CRITICAL SECTION MET
                       HOD 3 FUNCTIONS
   67 00000000         ;
   68 00000000         ; Description: Disable/Enable interrupts by preserving t
                       he state of interrupts.  Generally speaking you
   69 00000000         ;              would store the state of the interrupt di
                       sable flag in the local variable 'cpu_sr' and then
   70 00000000         ;              disable interrupts.  'cpu_sr' is allocate
                       d in all of uC/OS-II's functions that need to
   71 00000000         ;              disable interrupts.  You would restore th
                       e interrupt disable state by copying back 'cpu_sr'
   72 00000000         ;              into the CPU's status register.
   73 00000000         ;
   74 00000000         ; Prototypes :     OS_CPU_SR  OS_CPU_SR_Save(void);
   75 00000000         ;                  void       OS_CPU_SR_Restore(OS_CPU_S
                       R cpu_sr);
   76 00000000         ;
   77 00000000         ;
   78 00000000         ; Note(s)    : 1) These functions are used in general li
                       ke this:
   79 00000000         ;



ARM Macro Assembler    Page 3 


   80 00000000         ;                 void Task (void *p_arg)
   81 00000000         ;                 {
   82 00000000         ;                 #if OS_CRITICAL_METHOD == 3          /
                       * Allocate storage for CPU status register */
   83 00000000         ;                     OS_CPU_SR  cpu_sr;
   84 00000000         ;                 #endif
   85 00000000         ;
   86 00000000         ;                          :
   87 00000000         ;                          :
   88 00000000         ;                     OS_ENTER_CRITICAL();             /
                       * cpu_sr = OS_CPU_SaveSR();                */
   89 00000000         ;                          :
   90 00000000         ;                          :
   91 00000000         ;                     OS_EXIT_CRITICAL();              /
                       * OS_CPU_RestoreSR(cpu_sr);                */
   92 00000000         ;                          :
   93 00000000         ;                          :
   94 00000000         ;                 }
   95 00000000         ;*******************************************************
                       *************************************************
   96 00000000         
   97 00000000         OS_CPU_SR_Save
   98 00000000 F3EF 8010       MRS              R0, PRIMASK ; Set prio int mask
                                                             to mask all (excep
                                                            t faults)
   99 00000004 B672            CPSID            I
  100 00000006 4770            BX               LR
  101 00000008         
  102 00000008         OS_CPU_SR_Restore
  103 00000008 F380 8810       MSR              PRIMASK, R0
  104 0000000C 4770            BX               LR
  105 0000000E         
  106 0000000E         ;PAGE
  107 0000000E         ;*******************************************************
                       *************************************************
  108 0000000E         ;                                         START MULTITAS
                       KING
  109 0000000E         ;                                      void OSStartHighR
                       dy(void)
  110 0000000E         ;
  111 0000000E         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
  112 0000000E         ;              the first task to start.
  113 0000000E         ;
  114 0000000E         ;           2) OSStartHighRdy() MUST:
  115 0000000E         ;              a) Setup PendSV exception priority to low
                       est;
  116 0000000E         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
  117 0000000E         ;              c) Set the main stack to OS_CPU_ExceptStk
                       Base
  118 0000000E         ;              d) Trigger PendSV exception;
  119 0000000E         ;              e) Enable interrupts (tasks will run with
                        interrupts enabled).
  120 0000000E         ;*******************************************************
                       *************************************************
  121 0000000E         
  122 0000000E         OSStartHighRdy
  123 0000000E 481F            LDR              R0, =NVIC_SYSPRI14 ; Set the Pe



ARM Macro Assembler    Page 4 


                                                            ndSV exception prio
                                                            rity
  124 00000010 F04F 01FF       LDR              R1, =NVIC_PENDSV_PRI
  125 00000014 7001            STRB             R1, [R0]
  126 00000016         
  127 00000016 2000            MOVS             R0, #0      ; Set the PSP to 0 
                                                            for initial context
                                                             switch call
  128 00000018 F380 8809       MSR              PSP, R0
  129 0000001C         
  130 0000001C 481C            LDR              R0, =OS_CPU_ExceptStkBase ; Ini
                                                            tialize the MSP to 
                                                            the OS_CPU_ExceptSt
                                                            kBase
  131 0000001E 6801            LDR              R1, [R0]
  132 00000020 F381 8808       MSR              MSP, R1
  133 00000024         
  134 00000024 481B            LDR              R0, =OSRunning 
                                                            ; OSRunning = TRUE
  135 00000026 2101            MOVS             R1, #1
  136 00000028 7001            STRB             R1, [R0]
  137 0000002A         
  138 0000002A 481B            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  139 0000002C F04F 5180       LDR              R1, =NVIC_PENDSVSET
  140 00000030 6001            STR              R1, [R0]
  141 00000032         
  142 00000032 B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
  143 00000034         
  144 00000034         OSStartHang
  145 00000034 E7FE            B                OSStartHang ; Should never get 
                                                            here
  146 00000036         
  147 00000036         
  148 00000036         ;PAGE
  149 00000036         ;*******************************************************
                       *************************************************
  150 00000036         ;                       PERFORM A CONTEXT SWITCH (From t
                       ask level) - OSCtxSw()
  151 00000036         ;
  152 00000036         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function
  153 00000036         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  154 00000036         ;*******************************************************
                       *************************************************
  155 00000036         
  156 00000036         OSCtxSw
  157 00000036 4818            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  158 00000038 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  159 0000003C 6001            STR              R1, [R0]
  160 0000003E 4770            BX               LR



ARM Macro Assembler    Page 5 


  161 00000040         
  162 00000040         
  163 00000040         ;PAGE
  164 00000040         ;*******************************************************
                       *************************************************
  165 00000040         ;                   PERFORM A CONTEXT SWITCH (From inter
                       rupt level) - OSIntCtxSw()
  166 00000040         ;
  167 00000040         ; Note(s) : 1) OSIntCtxSw() is called by OSIntExit() whe
                       n it determines a context switch is needed as
  168 00000040         ;              the result of an interrupt.  This functio
                       n simply triggers a PendSV exception which will
  169 00000040         ;              be handled when there are no more interru
                       pts active and interrupts are enabled.
  170 00000040         ;*******************************************************
                       *************************************************
  171 00000040         
  172 00000040         OSIntCtxSw
  173 00000040 4815            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  174 00000042 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  175 00000046 6001            STR              R1, [R0]
  176 00000048 4770            BX               LR
  177 0000004A         
  178 0000004A         
  179 0000004A         ;PAGE
  180 0000004A         ;*******************************************************
                       *************************************************
  181 0000004A         ;                                       HANDLE PendSV EX
                       CEPTION
  182 0000004A         ;                                   void OS_CPU_PendSVHa
                       ndler(void)
  183 0000004A         ;
  184 0000004A         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
  185 0000004A         ;              context switches with Cortex-M3.  This is
                        because the Cortex-M3 auto-saves half of the
  186 0000004A         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  187 0000004A         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
  188 0000004A         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  189 0000004A         ;              a thread or occurs due to an interrupt or
                        exception.
  190 0000004A         ;
  191 0000004A         ;           2) Pseudo-code is:
  192 0000004A         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  193 0000004A         ;              b) Save remaining regs r4-r11 on process 
                       stack;
  194 0000004A         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
  195 0000004A         ;              d) Call OSTaskSwHook();
  196 0000004A         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  197 0000004A         ;              f) Get current ready thread TCB, OSTCBCur



ARM Macro Assembler    Page 6 


                        = OSTCBHighRdy;
  198 0000004A         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
  199 0000004A         ;              h) Restore R4-R11 from new process stack;
                       
  200 0000004A         ;              i) Perform exception return which will re
                       store remaining context.
  201 0000004A         ;
  202 0000004A         ;           3) On entry into PendSV handler:
  203 0000004A         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  204 0000004A         ;                 xPSR, PC, LR, R12, R0-R3
  205 0000004A         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  206 0000004A         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  207 0000004A         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
  208 0000004A         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
  209 0000004A         ;
  210 0000004A         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  211 0000004A         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  212 0000004A         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  213 0000004A         ;*******************************************************
                       *************************************************
  214 0000004A         
  215 0000004A         PendSV_Handler
  216 0000004A B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  217 0000004C F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  218 00000050 B128            CBZ              R0, PendSV_Handler_nosave ; Ski
                                                            p register save the
                                                             first time
  219 00000052         
  220 00000052 3820            SUBS             R0, R0, #0x20 ; Save remaining 
                                                            regs r4-11 on proce
                                                            ss stack
  221 00000054 E880 0FF0       STM              R0, {R4-R11}
  222 00000058         
  223 00000058 4910            LDR              R1, =OSTCBCur ; OSTCBCur->OSTCB
                                                            StkPtr = SP;
  224 0000005A 6809            LDR              R1, [R1]
  225 0000005C 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  226 0000005E         
  227 0000005E         ; At this point, entire context of process has been save
                       d
  228 0000005E         PendSV_Handler_nosave
  229 0000005E B500            PUSH             {R14}       ; Save LR exc_retur
                                                            n value
  230 00000060 480F            LDR              R0, =OSTaskSwHook 
                                                            ; OSTaskSwHook();



ARM Macro Assembler    Page 7 


  231 00000062 4780            BLX              R0
  232 00000064 F85D EB04       POP              {R14}
  233 00000068         
  234 00000068 480E            LDR              R0, =OSPrioCur ; OSPrioCur   = 
                                                            OSPrioHighRdy;
  235 0000006A 490F            LDR              R1, =OSPrioHighRdy
  236 0000006C 780A            LDRB             R2, [R1]
  237 0000006E 7002            STRB             R2, [R0]
  238 00000070         
  239 00000070 480A            LDR              R0, =OSTCBCur ; OSTCBCur = OSTC
                                                            BHighRdy;
  240 00000072 490E            LDR              R1, =OSTCBHighRdy
  241 00000074 680A            LDR              R2, [R1]
  242 00000076 6002            STR              R2, [R0]
  243 00000078         
  244 00000078 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            Rdy->StkPtr;
  245 0000007A E890 0FF0       LDM              R0, {R4-R11} ; Restore r4-11 fr
                                                            om new process stac
                                                            k
  246 0000007E 3020            ADDS             R0, R0, #0x20
  247 00000080 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  248 00000084 F04E 0E04       ORR              LR, LR, #0x04 ; Ensure exceptio
                                                            n return uses proce
                                                            ss stack
  249 00000088 B662            CPSIE            I
  250 0000008A 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  251 0000008C         
  252 0000008C                 END
              E000ED22 
              00000000 
              00000000 
              E000ED04 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4.fp --apcs=interwork --depend=.\mk6
4f12\flash\os_cpu_a_keil.d -o.\mk64f12\flash\os_cpu_a_keil.o -Id:\Keil_v5\ARM\R
V31\INC -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include -Id:\Keil_v5\ARM\P
ACK\Keil\Kinetis_K60_DFP\1.0.1\Device\Include --list=.\os_cpu_a_keil.lst ..\..\
..\..\Libraries\utilities\uCOSII\port\os_cpu_a_keil.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 57 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_k
eil.asm
   Uses
      None
Comment: .text unused
OSCtxSw 00000036

Symbol: OSCtxSw
   Definitions
      At line 156 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_
keil.asm
   Uses
      At line 39 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_k
eil.asm
Comment: OSCtxSw used once
OSIntCtxSw 00000040

Symbol: OSIntCtxSw
   Definitions
      At line 172 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_
keil.asm
   Uses
      At line 40 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_k
eil.asm
Comment: OSIntCtxSw used once
OSStartHang 00000034

Symbol: OSStartHang
   Definitions
      At line 144 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_
keil.asm
   Uses
      At line 145 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_
keil.asm
Comment: OSStartHang used once
OSStartHighRdy 0000000E

Symbol: OSStartHighRdy
   Definitions
      At line 122 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_
keil.asm
   Uses
      At line 38 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_k
eil.asm
Comment: OSStartHighRdy used once
OS_CPU_SR_Restore 00000008

Symbol: OS_CPU_SR_Restore
   Definitions
      At line 102 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_
keil.asm
   Uses
      At line 37 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_k
eil.asm
Comment: OS_CPU_SR_Restore used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

OS_CPU_SR_Save 00000000

Symbol: OS_CPU_SR_Save
   Definitions
      At line 97 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_k
eil.asm
   Uses
      At line 36 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_k
eil.asm
Comment: OS_CPU_SR_Save used once
PendSV_Handler 0000004A

Symbol: PendSV_Handler
   Definitions
      At line 215 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_
keil.asm
   Uses
      At line 41 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_k
eil.asm
Comment: PendSV_Handler used once
PendSV_Handler_nosave 0000005E

Symbol: PendSV_Handler_nosave
   Definitions
      At line 228 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_
keil.asm
   Uses
      At line 218 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_
keil.asm
Comment: PendSV_Handler_nosave used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 48 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_k
eil.asm
   Uses
      At line 138 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_
keil.asm
      At line 157 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_
keil.asm
      At line 173 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_
keil.asm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 51 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_k
eil.asm
   Uses
      At line 139 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_
keil.asm
      At line 158 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_
keil.asm
      At line 174 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_
keil.asm

NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 50 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_k
eil.asm
   Uses
      At line 124 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_
keil.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 49 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_k
eil.asm
   Uses
      At line 123 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_
keil.asm
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 32 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_k
eil.asm
   Uses
      None
Comment: OSIntExit unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 28 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_k
eil.asm
   Uses
      At line 234 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_
keil.asm
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 29 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_k
eil.asm
   Uses
      At line 235 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_
keil.asm
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 27 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_k
eil.asm
   Uses
      At line 134 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_
keil.asm
Comment: OSRunning used once
OSTCBCur 00000000

Symbol: OSTCBCur
   Definitions
      At line 30 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_k
eil.asm
   Uses
      At line 223 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_
keil.asm
      At line 239 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_
keil.asm

OSTCBHighRdy 00000000

Symbol: OSTCBHighRdy
   Definitions
      At line 31 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_k
eil.asm
   Uses
      At line 240 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

keil.asm
Comment: OSTCBHighRdy used once
OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 33 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_k
eil.asm
   Uses
      At line 230 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_
keil.asm
Comment: OSTaskSwHook used once
OS_CPU_ExceptStkBase 00000000

Symbol: OS_CPU_ExceptStkBase
   Definitions
      At line 34 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_k
eil.asm
   Uses
      At line 130 in file ..\..\..\..\Libraries\utilities\uCOSII\port\os_cpu_a_
keil.asm
Comment: OS_CPU_ExceptStkBase used once
8 symbols
354 symbols in table
